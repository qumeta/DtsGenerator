using DtsGenerator.TypeScript;
using DtsGenerator.Utilities;
using System;
using System.Collections.Generic;
using System.Text;

namespace DtsGenerator.Generators
{
    public class ModelGenerator : GeneratorBase
    {
        public string GenerateClass(TypeScriptClassModel classModel, bool includeHeader = true)
        {
            var sb = new StringBuilder();

            if (includeHeader)
            {
                sb.Append(AutogeneratedHeader_Compact());
            }

            var typeGenerator = new TypeGenerator();

            // TODO egret项目暂时不要用import，并且加上module
            // imports
            GenerateImportDeclarations(classModel.Imports, sb);

            //sb.AppendLine("declare module server {");

            // class declaration
            sb.AppendLine("export interface "
            //sb.AppendLine("interface "
                + classModel.Name
                + (classModel.IsGeneric ? $"<{GenerateTypeParameters(classModel.TypeParameters)}>" : "")
                + (string.IsNullOrEmpty(classModel.BaseClass) ? "" : " extends " + classModel.BaseClass)
                + " {");

            // properties
            foreach (var property in classModel.Properties)
            {
                var emittedType = typeGenerator.GetEmittedType(property.Type);

                sb.AppendLine("\t"                                  // indentation
                    + NameCaseConverter.ToCamelCase(property.Name)  // property name
                    + (property.IsOptional ? "?" : "")              // optional?
                    + ": "
                    + emittedType                                   // property type
                    + ";");
            }

            sb.AppendLine("}");

            // module
            //sb.AppendLine("}");

            return sb.ToString();
        }

        public string GenerateEnum(TypeScriptEnumModel enumModel, bool includeHeader = true)
        {
            var sb = new StringBuilder();

            if (includeHeader)
            {
                sb.Append(AutogeneratedHeader_Compact());
            }

            // enums have no imports
            //sb.AppendLine("declare module server {");

            // enum declaration
            sb.AppendLine("export enum " + enumModel.Name + " {");
            //sb.AppendLine("const enum " + enumModel.Name + " {");

            // members
            for (int i = 0; i < enumModel.Members.Count; i++)
            {
                var member = enumModel.Members[i];

                sb.AppendLine("\t"                                              // indentation
                    + member.Name                                               // member name
                    + (member.Value.HasValue ? $" = {member.Value.Value}" : "") // optional constant value
                    + (i == enumModel.Members.Count - 1 ? "" : ","));           // skip comma if last value
            }

            sb.AppendLine("}");

            // module
            //sb.AppendLine("}");

            return sb.ToString();
        }
    }
}
